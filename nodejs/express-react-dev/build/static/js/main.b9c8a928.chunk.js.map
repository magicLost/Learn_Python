{"version":3,"sources":["client/component/WebSocket/WebSocket.tsx","client/App.tsx","index.tsx"],"names":["WebSocket","streamRef","useRef","undefined","output","setOutput","useState","inputValue","setInputValue","useEffect","current","wsock","window","location","host","Error","pipe","through","buf","enc","next","console","log","toString","prevOutput","on","onSubmit","event","preventDefault","write","type","name","onChange","target","value","join","App","className","ReactDOM","render","document","getElementById"],"mappings":"yZAkEeA,MA3Df,WAEI,MAAMC,EAAiEC,sBAAOC,IAGtEC,EAAQC,GAAcC,mBAAS,CAAC,MAChCC,EAAYC,GAAkBF,mBAAS,IA2C/C,OAzCAG,oBAAU,KAGN,GAFAR,EAAUS,QAAUC,IAAM,QAAUC,OAAOC,SAASC,WAE3BX,IAAtBF,EAAUS,QAAuB,MAAM,IAAIK,MAAM,aAEpDd,EAAUS,QAAQM,KAAKC,IAAQ,CAACC,EAAKC,EAAKC,KAEtCC,QAAQC,IAAI,QAASJ,EAAIK,YACzBlB,EAAWmB,GACA,IAAIA,EAAYN,IAE3BE,OAKJnB,EAAUS,QAAQe,GAAG,MAAO,KACxBJ,QAAQC,IAAI,gBAEhBrB,EAAUS,QAAQe,GAAG,SAAU,KAC3BJ,QAAQC,IAAI,mBAEhBrB,EAAUS,QAAQe,GAAG,QAAS,KAC1BJ,QAAQC,IAAI,kBAEhBrB,EAAUS,QAAQe,GAAG,QAAS,KAC1BJ,QAAQC,IAAI,mBAEjB,IAcC,6BACI,0BAAMI,SAbIC,IAGd,GAFAA,EAAMC,iBACNP,QAAQC,IAAK,iBAAgBf,UACJJ,IAAtBF,EAAUS,QAAuB,MAAM,IAAIK,MAAM,aACpDd,EAAUS,QAAQmB,MAAMtB,EAAa,QAU7B,2BAAOuB,KAAK,OAAOC,KAAK,MAAMC,SAPnBL,IACnBnB,EAAcmB,EAAMM,OAAOC,QAMoCA,MAAO3B,KAElE,6BAAMH,EAAO+B,KAAK,OC1CfC,MAdf,WACE,OACE,yBAAKC,UAAU,OAMb,kBAAC,EAAD,QCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b9c8a928.chunk.js","sourcesContent":["import React, {useEffect, useState, useRef, MutableRefObject} from 'react';\nimport wsock from 'websocket-stream';\nimport through from \"through2\";\nimport  finished from 'stream';\n\n//import './Websocket.module.scss';\n\nfunction WebSocket() {\n\n    const streamRef: MutableRefObject<wsock.WebSocketDuplex | undefined> = useRef(undefined);\n    //const inputRef: MutableRefObject<HTMLInputElement | undefined> = useRef(undefined);\n\n    const [ output, setOutput ] = useState(['']);\n    const [ inputValue, setInputValue ] = useState(\"\");\n\n    useEffect(() => {\n        streamRef.current = wsock('ws://' + window.location.host);\n\n        if(streamRef.current === undefined) throw new Error(\"No STREAM\");\n\n        streamRef.current.pipe(through((buf, enc, next) => {\n            //output.push(buf.toString());\n            console.log(\"PIPE \", buf.toString());\n            setOutput((prevOutput: String[]) => {\n                return [...prevOutput, buf];\n            });\n            next();\n        }));\n\n        //console.log(streamRef.current);\n\n        streamRef.current.on('end', () => {\n            console.log(\"STREAM END\");\n        });\n        streamRef.current.on('finish', () => {\n            console.log(\"STREAM FINISH\");\n        })\n        streamRef.current.on('error', () => {\n            console.log(\"STREAM ERROR\");\n        })\n        streamRef.current.on('close', () => {\n            console.log(\"STREAM CLOSE\");\n        }) \n    }, []);\n\n    const onSubmit = (event: any) => {\n        event.preventDefault();\n        console.log(`Input value - ${inputValue}`);\n        if(streamRef.current === undefined) throw new Error(\"No STREAM\");\n        streamRef.current.write(inputValue + \"\\n\");\n    };\n\n    const onInputChange = (event: any) => {\n        setInputValue(event.target.value);\n    };\n\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <input type=\"text\" name=\"msg\" onChange={onInputChange} value={inputValue} />\n            </form>\n            <pre>{output.join('')}</pre>\n        </div>\n    );\n}\n\nexport default WebSocket;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport WebSocket from './component/WebSocket/WebSocket';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n       \n      </header> */}\n\n      <WebSocket />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './client/index.css';\nimport App from './client/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}